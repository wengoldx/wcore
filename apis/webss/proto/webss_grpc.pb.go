// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/webss.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebssClient is the client API for Webss service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebssClient interface {
	DeleteFiles(ctx context.Context, in *DelFiles, opts ...grpc.CallOption) (*WEmpty, error)
	DeleteConfig(ctx context.Context, in *DeleteLifeConfig, opts ...grpc.CallOption) (*WEmpty, error)
	AddConfig(ctx context.Context, in *LifeConfig, opts ...grpc.CallOption) (*ID, error)
	AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*WEmpty, error)
}

type webssClient struct {
	cc grpc.ClientConnInterface
}

func NewWebssClient(cc grpc.ClientConnInterface) WebssClient {
	return &webssClient{cc}
}

func (c *webssClient) DeleteFiles(ctx context.Context, in *DelFiles, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/proto.Webss/DeleteFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webssClient) DeleteConfig(ctx context.Context, in *DeleteLifeConfig, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/proto.Webss/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webssClient) AddConfig(ctx context.Context, in *LifeConfig, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/proto.Webss/AddConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webssClient) AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*WEmpty, error) {
	out := new(WEmpty)
	err := c.cc.Invoke(ctx, "/proto.Webss/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebssServer is the server API for Webss service.
// All implementations must embed UnimplementedWebssServer
// for forward compatibility
type WebssServer interface {
	DeleteFiles(context.Context, *DelFiles) (*WEmpty, error)
	DeleteConfig(context.Context, *DeleteLifeConfig) (*WEmpty, error)
	AddConfig(context.Context, *LifeConfig) (*ID, error)
	AddTag(context.Context, *Tag) (*WEmpty, error)
	mustEmbedUnimplementedWebssServer()
}

// UnimplementedWebssServer must be embedded to have forward compatible implementations.
type UnimplementedWebssServer struct {
}

func (UnimplementedWebssServer) DeleteFiles(context.Context, *DelFiles) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedWebssServer) DeleteConfig(context.Context, *DeleteLifeConfig) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedWebssServer) AddConfig(context.Context, *LifeConfig) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (UnimplementedWebssServer) AddTag(context.Context, *Tag) (*WEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedWebssServer) mustEmbedUnimplementedWebssServer() {}

// UnsafeWebssServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebssServer will
// result in compilation errors.
type UnsafeWebssServer interface {
	mustEmbedUnimplementedWebssServer()
}

func RegisterWebssServer(s grpc.ServiceRegistrar, srv WebssServer) {
	s.RegisterService(&Webss_ServiceDesc, srv)
}

func _Webss_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebssServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Webss/DeleteFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebssServer).DeleteFiles(ctx, req.(*DelFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webss_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLifeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebssServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Webss/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebssServer).DeleteConfig(ctx, req.(*DeleteLifeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webss_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifeConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebssServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Webss/AddConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebssServer).AddConfig(ctx, req.(*LifeConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webss_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebssServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Webss/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebssServer).AddTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

// Webss_ServiceDesc is the grpc.ServiceDesc for Webss service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webss_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Webss",
	HandlerType: (*WebssServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFiles",
			Handler:    _Webss_DeleteFiles_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Webss_DeleteConfig_Handler,
		},
		{
			MethodName: "AddConfig",
			Handler:    _Webss_AddConfig_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Webss_AddTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/webss.proto",
}
