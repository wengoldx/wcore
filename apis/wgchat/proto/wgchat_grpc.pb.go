// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: wgchat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WgchatClient is the client API for Wgchat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WgchatClient interface {
	AddStaff(ctx context.Context, in *StaffAddReq, opts ...grpc.CallOption) (*WgchatEmpty, error)
	UpOneStatus(ctx context.Context, in *StaffOneStatus, opts ...grpc.CallOption) (*WgchatEmpty, error)
	UpAllStatus(ctx context.Context, in *StaffComStatus, opts ...grpc.CallOption) (*WgchatEmpty, error)
	DelOne(ctx context.Context, in *StaffDelOne, opts ...grpc.CallOption) (*WgchatEmpty, error)
	DelAll(ctx context.Context, in *StaffDelAll, opts ...grpc.CallOption) (*WgchatEmpty, error)
}

type wgchatClient struct {
	cc grpc.ClientConnInterface
}

func NewWgchatClient(cc grpc.ClientConnInterface) WgchatClient {
	return &wgchatClient{cc}
}

func (c *wgchatClient) AddStaff(ctx context.Context, in *StaffAddReq, opts ...grpc.CallOption) (*WgchatEmpty, error) {
	out := new(WgchatEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/AddStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) UpOneStatus(ctx context.Context, in *StaffOneStatus, opts ...grpc.CallOption) (*WgchatEmpty, error) {
	out := new(WgchatEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/UpOneStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) UpAllStatus(ctx context.Context, in *StaffComStatus, opts ...grpc.CallOption) (*WgchatEmpty, error) {
	out := new(WgchatEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/UpAllStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) DelOne(ctx context.Context, in *StaffDelOne, opts ...grpc.CallOption) (*WgchatEmpty, error) {
	out := new(WgchatEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/DelOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wgchatClient) DelAll(ctx context.Context, in *StaffDelAll, opts ...grpc.CallOption) (*WgchatEmpty, error) {
	out := new(WgchatEmpty)
	err := c.cc.Invoke(ctx, "/proto.wgchat/DelAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WgchatServer is the server API for Wgchat service.
// All implementations must embed UnimplementedWgchatServer
// for forward compatibility
type WgchatServer interface {
	AddStaff(context.Context, *StaffAddReq) (*WgchatEmpty, error)
	UpOneStatus(context.Context, *StaffOneStatus) (*WgchatEmpty, error)
	UpAllStatus(context.Context, *StaffComStatus) (*WgchatEmpty, error)
	DelOne(context.Context, *StaffDelOne) (*WgchatEmpty, error)
	DelAll(context.Context, *StaffDelAll) (*WgchatEmpty, error)
	mustEmbedUnimplementedWgchatServer()
}

// UnimplementedWgchatServer must be embedded to have forward compatible implementations.
type UnimplementedWgchatServer struct {
}

func (UnimplementedWgchatServer) AddStaff(context.Context, *StaffAddReq) (*WgchatEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaff not implemented")
}
func (UnimplementedWgchatServer) UpOneStatus(context.Context, *StaffOneStatus) (*WgchatEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpOneStatus not implemented")
}
func (UnimplementedWgchatServer) UpAllStatus(context.Context, *StaffComStatus) (*WgchatEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpAllStatus not implemented")
}
func (UnimplementedWgchatServer) DelOne(context.Context, *StaffDelOne) (*WgchatEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOne not implemented")
}
func (UnimplementedWgchatServer) DelAll(context.Context, *StaffDelAll) (*WgchatEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAll not implemented")
}
func (UnimplementedWgchatServer) mustEmbedUnimplementedWgchatServer() {}

// UnsafeWgchatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WgchatServer will
// result in compilation errors.
type UnsafeWgchatServer interface {
	mustEmbedUnimplementedWgchatServer()
}

func RegisterWgchatServer(s grpc.ServiceRegistrar, srv WgchatServer) {
	s.RegisterService(&Wgchat_ServiceDesc, srv)
}

func _Wgchat_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/AddStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).AddStaff(ctx, req.(*StaffAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_UpOneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffOneStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).UpOneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/UpOneStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).UpOneStatus(ctx, req.(*StaffOneStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_UpAllStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffComStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).UpAllStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/UpAllStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).UpAllStatus(ctx, req.(*StaffComStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_DelOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffDelOne)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).DelOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/DelOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).DelOne(ctx, req.(*StaffDelOne))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wgchat_DelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffDelAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WgchatServer).DelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.wgchat/DelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WgchatServer).DelAll(ctx, req.(*StaffDelAll))
	}
	return interceptor(ctx, in, info, handler)
}

// Wgchat_ServiceDesc is the grpc.ServiceDesc for Wgchat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wgchat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.wgchat",
	HandlerType: (*WgchatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStaff",
			Handler:    _Wgchat_AddStaff_Handler,
		},
		{
			MethodName: "UpOneStatus",
			Handler:    _Wgchat_UpOneStatus_Handler,
		},
		{
			MethodName: "UpAllStatus",
			Handler:    _Wgchat_UpAllStatus_Handler,
		},
		{
			MethodName: "DelOne",
			Handler:    _Wgchat_DelOne_Handler,
		},
		{
			MethodName: "DelAll",
			Handler:    _Wgchat_DelAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgchat.proto",
}
