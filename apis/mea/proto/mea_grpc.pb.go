// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.3
// source: proto/mea.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeaClient is the client API for Mea service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeaClient interface {
	Measure(ctx context.Context, in *BodyAdd, opts ...grpc.CallOption) (*ReqID, error)
	ReMeasure(ctx context.Context, in *BodyUpdate, opts ...grpc.CallOption) (*EmptyMessage, error)
	Delete(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*EmptyMessage, error)
	Capture(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*EmptyMessage, error)
	BodyDetail(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*BodyDetailResp, error)
	BodyList(ctx context.Context, in *ReqIDs, opts ...grpc.CallOption) (*BodyBasicResp, error)
}

type meaClient struct {
	cc grpc.ClientConnInterface
}

func NewMeaClient(cc grpc.ClientConnInterface) MeaClient {
	return &meaClient{cc}
}

func (c *meaClient) Measure(ctx context.Context, in *BodyAdd, opts ...grpc.CallOption) (*ReqID, error) {
	out := new(ReqID)
	err := c.cc.Invoke(ctx, "/proto.Mea/Measure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) ReMeasure(ctx context.Context, in *BodyUpdate, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/proto.Mea/ReMeasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Delete(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/proto.Mea/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) Capture(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/proto.Mea/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) BodyDetail(ctx context.Context, in *ReqID, opts ...grpc.CallOption) (*BodyDetailResp, error) {
	out := new(BodyDetailResp)
	err := c.cc.Invoke(ctx, "/proto.Mea/BodyDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meaClient) BodyList(ctx context.Context, in *ReqIDs, opts ...grpc.CallOption) (*BodyBasicResp, error) {
	out := new(BodyBasicResp)
	err := c.cc.Invoke(ctx, "/proto.Mea/BodyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeaServer is the server API for Mea service.
// All implementations must embed UnimplementedMeaServer
// for forward compatibility
type MeaServer interface {
	Measure(context.Context, *BodyAdd) (*ReqID, error)
	ReMeasure(context.Context, *BodyUpdate) (*EmptyMessage, error)
	Delete(context.Context, *ReqID) (*EmptyMessage, error)
	Capture(context.Context, *ReqID) (*EmptyMessage, error)
	BodyDetail(context.Context, *ReqID) (*BodyDetailResp, error)
	BodyList(context.Context, *ReqIDs) (*BodyBasicResp, error)
	mustEmbedUnimplementedMeaServer()
}

// UnimplementedMeaServer must be embedded to have forward compatible implementations.
type UnimplementedMeaServer struct {
}

func (UnimplementedMeaServer) Measure(context.Context, *BodyAdd) (*ReqID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Measure not implemented")
}
func (UnimplementedMeaServer) ReMeasure(context.Context, *BodyUpdate) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReMeasure not implemented")
}
func (UnimplementedMeaServer) Delete(context.Context, *ReqID) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMeaServer) Capture(context.Context, *ReqID) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedMeaServer) BodyDetail(context.Context, *ReqID) (*BodyDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BodyDetail not implemented")
}
func (UnimplementedMeaServer) BodyList(context.Context, *ReqIDs) (*BodyBasicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BodyList not implemented")
}
func (UnimplementedMeaServer) mustEmbedUnimplementedMeaServer() {}

// UnsafeMeaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeaServer will
// result in compilation errors.
type UnsafeMeaServer interface {
	mustEmbedUnimplementedMeaServer()
}

func RegisterMeaServer(s grpc.ServiceRegistrar, srv MeaServer) {
	s.RegisterService(&Mea_ServiceDesc, srv)
}

func _Mea_Measure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Measure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Measure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Measure(ctx, req.(*BodyAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_ReMeasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).ReMeasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/ReMeasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).ReMeasure(ctx, req.(*BodyUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Delete(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).Capture(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_BodyDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).BodyDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/BodyDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).BodyDetail(ctx, req.(*ReqID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mea_BodyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeaServer).BodyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Mea/BodyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeaServer).BodyList(ctx, req.(*ReqIDs))
	}
	return interceptor(ctx, in, info, handler)
}

// Mea_ServiceDesc is the grpc.ServiceDesc for Mea service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mea_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mea",
	HandlerType: (*MeaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Measure",
			Handler:    _Mea_Measure_Handler,
		},
		{
			MethodName: "ReMeasure",
			Handler:    _Mea_ReMeasure_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Mea_Delete_Handler,
		},
		{
			MethodName: "Capture",
			Handler:    _Mea_Capture_Handler,
		},
		{
			MethodName: "BodyDetail",
			Handler:    _Mea_BodyDetail_Handler,
		},
		{
			MethodName: "BodyList",
			Handler:    _Mea_BodyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mea.proto",
}
