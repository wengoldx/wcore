// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vcall/vcall.proto

package vcall

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Agent service

type AgentService interface {
	/// registry one new agent ,add profile
	Registry(ctx context.Context, in *AgentInfo, opts ...client.CallOption) (*PhoneResp, error)
	/// get all agents profile
	GetAgents(ctx context.Context, in *OwnerPage, opts ...client.CallOption) (*AgentProfiles, error)
	/// get agent profile by phone
	GetProfile(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*AgentProfile, error)
	/// get agent profile by uuid
	IsExist(ctx context.Context, in *UUIDPhone, opts ...client.CallOption) (*Exist, error)
}

type agentService struct {
	c    client.Client
	name string
}

func NewAgentService(name string, c client.Client) AgentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "vcall"
	}
	return &agentService{
		c:    c,
		name: name,
	}
}

func (c *agentService) Registry(ctx context.Context, in *AgentInfo, opts ...client.CallOption) (*PhoneResp, error) {
	req := c.c.NewRequest(c.name, "Agent.Registry", in)
	out := new(PhoneResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) GetAgents(ctx context.Context, in *OwnerPage, opts ...client.CallOption) (*AgentProfiles, error) {
	req := c.c.NewRequest(c.name, "Agent.GetAgents", in)
	out := new(AgentProfiles)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) GetProfile(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*AgentProfile, error) {
	req := c.c.NewRequest(c.name, "Agent.GetProfile", in)
	out := new(AgentProfile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentService) IsExist(ctx context.Context, in *UUIDPhone, opts ...client.CallOption) (*Exist, error) {
	req := c.c.NewRequest(c.name, "Agent.IsExist", in)
	out := new(Exist)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentHandler interface {
	/// registry one new agent ,add profile
	Registry(context.Context, *AgentInfo, *PhoneResp) error
	/// get all agents profile
	GetAgents(context.Context, *OwnerPage, *AgentProfiles) error
	/// get agent profile by phone
	GetProfile(context.Context, *PhoneReq, *AgentProfile) error
	/// get agent profile by uuid
	IsExist(context.Context, *UUIDPhone, *Exist) error
}

func RegisterAgentHandler(s server.Server, hdlr AgentHandler, opts ...server.HandlerOption) error {
	type agent interface {
		Registry(ctx context.Context, in *AgentInfo, out *PhoneResp) error
		GetAgents(ctx context.Context, in *OwnerPage, out *AgentProfiles) error
		GetProfile(ctx context.Context, in *PhoneReq, out *AgentProfile) error
		IsExist(ctx context.Context, in *UUIDPhone, out *Exist) error
	}
	type Agent struct {
		agent
	}
	h := &agentHandler{hdlr}
	return s.Handle(s.NewHandler(&Agent{h}, opts...))
}

type agentHandler struct {
	AgentHandler
}

func (h *agentHandler) Registry(ctx context.Context, in *AgentInfo, out *PhoneResp) error {
	return h.AgentHandler.Registry(ctx, in, out)
}

func (h *agentHandler) GetAgents(ctx context.Context, in *OwnerPage, out *AgentProfiles) error {
	return h.AgentHandler.GetAgents(ctx, in, out)
}

func (h *agentHandler) GetProfile(ctx context.Context, in *PhoneReq, out *AgentProfile) error {
	return h.AgentHandler.GetProfile(ctx, in, out)
}

func (h *agentHandler) IsExist(ctx context.Context, in *UUIDPhone, out *Exist) error {
	return h.AgentHandler.IsExist(ctx, in, out)
}

// Client API for User service

type UserService interface {
	CheckPhone(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*PhoneResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "vcall"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CheckPhone(ctx context.Context, in *PhoneReq, opts ...client.CallOption) (*PhoneResp, error) {
	req := c.c.NewRequest(c.name, "User.CheckPhone", in)
	out := new(PhoneResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	CheckPhone(context.Context, *PhoneReq, *PhoneResp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		CheckPhone(ctx context.Context, in *PhoneReq, out *PhoneResp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) CheckPhone(ctx context.Context, in *PhoneReq, out *PhoneResp) error {
	return h.UserHandler.CheckPhone(ctx, in, out)
}

// Client API for Trade service

type TradeService interface {
	SetRemained(ctx context.Context, in *TradeReq, opts ...client.CallOption) (*StatusResp, error)
}

type tradeService struct {
	c    client.Client
	name string
}

func NewTradeService(name string, c client.Client) TradeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "vcall"
	}
	return &tradeService{
		c:    c,
		name: name,
	}
}

func (c *tradeService) SetRemained(ctx context.Context, in *TradeReq, opts ...client.CallOption) (*StatusResp, error) {
	req := c.c.NewRequest(c.name, "Trade.SetRemained", in)
	out := new(StatusResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trade service

type TradeHandler interface {
	SetRemained(context.Context, *TradeReq, *StatusResp) error
}

func RegisterTradeHandler(s server.Server, hdlr TradeHandler, opts ...server.HandlerOption) error {
	type trade interface {
		SetRemained(ctx context.Context, in *TradeReq, out *StatusResp) error
	}
	type Trade struct {
		trade
	}
	h := &tradeHandler{hdlr}
	return s.Handle(s.NewHandler(&Trade{h}, opts...))
}

type tradeHandler struct {
	TradeHandler
}

func (h *tradeHandler) SetRemained(ctx context.Context, in *TradeReq, out *StatusResp) error {
	return h.TradeHandler.SetRemained(ctx, in, out)
}
