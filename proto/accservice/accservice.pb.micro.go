// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/accservice/accservice.proto

package accservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Account service

type AccountService interface {
	GetPubKey(ctx context.Context, in *Target, opts ...client.CallOption) (*PublickKey, error)
	GenToken(ctx context.Context, in *UUID, opts ...client.CallOption) (*Token, error)
	ViaToken(ctx context.Context, in *Token, opts ...client.CallOption) (*UUID, error)
	ViaAccPwd(ctx context.Context, in *ViaPwd, opts ...client.CallOption) (*Status, error)
	SendSmsRegCode(ctx context.Context, in *Phone, opts ...client.CallOption) (*UUID, error)
	SendSmsRetrieveCode(ctx context.Context, in *Phone, opts ...client.CallOption) (*UUID, error)
	SendSmsLoginCode(ctx context.Context, in *Phone, opts ...client.CallOption) (*UUID, error)
	SendSmsBindCode(ctx context.Context, in *TokenPhone, opts ...client.CallOption) (*Status, error)
	SendEmailRegCode(ctx context.Context, in *Email, opts ...client.CallOption) (*UUID, error)
	SendEmailRetrieveCode(ctx context.Context, in *Email, opts ...client.CallOption) (*UUID, error)
	SendEmailBindCode(ctx context.Context, in *TokenEmail, opts ...client.CallOption) (*Status, error)
	ActBySmsCode(ctx context.Context, in *ViaReg, opts ...client.CallOption) (*Token, error)
	ActBySmsCodeNoPw(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error)
	ViaRetrieveSmsCode(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error)
	ViaLoginSmsCode(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error)
	ViaBindSmsCode(ctx context.Context, in *TokenCode, opts ...client.CallOption) (*Status, error)
	ActByEmailCode(ctx context.Context, in *ViaReg, opts ...client.CallOption) (*Token, error)
	ViaRetrieveEmailCode(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error)
	ViaBindEmailCode(ctx context.Context, in *TokenCode, opts ...client.CallOption) (*Status, error)
	AccLogin(ctx context.Context, in *AccPwd, opts ...client.CallOption) (*Token, error)
	OverridePwd(ctx context.Context, in *TokenPwd, opts ...client.CallOption) (*Token, error)
	GetPhoneEmail(ctx context.Context, in *Token, opts ...client.CallOption) (*PhoneEmail, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "accservice"
	}
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) GetPubKey(ctx context.Context, in *Target, opts ...client.CallOption) (*PublickKey, error) {
	req := c.c.NewRequest(c.name, "Account.GetPubKey", in)
	out := new(PublickKey)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GenToken(ctx context.Context, in *UUID, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.GenToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaToken(ctx context.Context, in *Token, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.name, "Account.ViaToken", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaAccPwd(ctx context.Context, in *ViaPwd, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Account.ViaAccPwd", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendSmsRegCode(ctx context.Context, in *Phone, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.name, "Account.SendSmsRegCode", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendSmsRetrieveCode(ctx context.Context, in *Phone, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.name, "Account.SendSmsRetrieveCode", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendSmsLoginCode(ctx context.Context, in *Phone, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.name, "Account.SendSmsLoginCode", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendSmsBindCode(ctx context.Context, in *TokenPhone, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Account.SendSmsBindCode", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendEmailRegCode(ctx context.Context, in *Email, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.name, "Account.SendEmailRegCode", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendEmailRetrieveCode(ctx context.Context, in *Email, opts ...client.CallOption) (*UUID, error) {
	req := c.c.NewRequest(c.name, "Account.SendEmailRetrieveCode", in)
	out := new(UUID)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) SendEmailBindCode(ctx context.Context, in *TokenEmail, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Account.SendEmailBindCode", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ActBySmsCode(ctx context.Context, in *ViaReg, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.ActBySmsCode", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ActBySmsCodeNoPw(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.ActBySmsCodeNoPw", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaRetrieveSmsCode(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.ViaRetrieveSmsCode", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaLoginSmsCode(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.ViaLoginSmsCode", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaBindSmsCode(ctx context.Context, in *TokenCode, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Account.ViaBindSmsCode", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ActByEmailCode(ctx context.Context, in *ViaReg, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.ActByEmailCode", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaRetrieveEmailCode(ctx context.Context, in *ViaCode, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.ViaRetrieveEmailCode", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) ViaBindEmailCode(ctx context.Context, in *TokenCode, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Account.ViaBindEmailCode", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AccLogin(ctx context.Context, in *AccPwd, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.AccLogin", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) OverridePwd(ctx context.Context, in *TokenPwd, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Account.OverridePwd", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetPhoneEmail(ctx context.Context, in *Token, opts ...client.CallOption) (*PhoneEmail, error) {
	req := c.c.NewRequest(c.name, "Account.GetPhoneEmail", in)
	out := new(PhoneEmail)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	GetPubKey(context.Context, *Target, *PublickKey) error
	GenToken(context.Context, *UUID, *Token) error
	ViaToken(context.Context, *Token, *UUID) error
	ViaAccPwd(context.Context, *ViaPwd, *Status) error
	SendSmsRegCode(context.Context, *Phone, *UUID) error
	SendSmsRetrieveCode(context.Context, *Phone, *UUID) error
	SendSmsLoginCode(context.Context, *Phone, *UUID) error
	SendSmsBindCode(context.Context, *TokenPhone, *Status) error
	SendEmailRegCode(context.Context, *Email, *UUID) error
	SendEmailRetrieveCode(context.Context, *Email, *UUID) error
	SendEmailBindCode(context.Context, *TokenEmail, *Status) error
	ActBySmsCode(context.Context, *ViaReg, *Token) error
	ActBySmsCodeNoPw(context.Context, *ViaCode, *Token) error
	ViaRetrieveSmsCode(context.Context, *ViaCode, *Token) error
	ViaLoginSmsCode(context.Context, *ViaCode, *Token) error
	ViaBindSmsCode(context.Context, *TokenCode, *Status) error
	ActByEmailCode(context.Context, *ViaReg, *Token) error
	ViaRetrieveEmailCode(context.Context, *ViaCode, *Token) error
	ViaBindEmailCode(context.Context, *TokenCode, *Status) error
	AccLogin(context.Context, *AccPwd, *Token) error
	OverridePwd(context.Context, *TokenPwd, *Token) error
	GetPhoneEmail(context.Context, *Token, *PhoneEmail) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		GetPubKey(ctx context.Context, in *Target, out *PublickKey) error
		GenToken(ctx context.Context, in *UUID, out *Token) error
		ViaToken(ctx context.Context, in *Token, out *UUID) error
		ViaAccPwd(ctx context.Context, in *ViaPwd, out *Status) error
		SendSmsRegCode(ctx context.Context, in *Phone, out *UUID) error
		SendSmsRetrieveCode(ctx context.Context, in *Phone, out *UUID) error
		SendSmsLoginCode(ctx context.Context, in *Phone, out *UUID) error
		SendSmsBindCode(ctx context.Context, in *TokenPhone, out *Status) error
		SendEmailRegCode(ctx context.Context, in *Email, out *UUID) error
		SendEmailRetrieveCode(ctx context.Context, in *Email, out *UUID) error
		SendEmailBindCode(ctx context.Context, in *TokenEmail, out *Status) error
		ActBySmsCode(ctx context.Context, in *ViaReg, out *Token) error
		ActBySmsCodeNoPw(ctx context.Context, in *ViaCode, out *Token) error
		ViaRetrieveSmsCode(ctx context.Context, in *ViaCode, out *Token) error
		ViaLoginSmsCode(ctx context.Context, in *ViaCode, out *Token) error
		ViaBindSmsCode(ctx context.Context, in *TokenCode, out *Status) error
		ActByEmailCode(ctx context.Context, in *ViaReg, out *Token) error
		ViaRetrieveEmailCode(ctx context.Context, in *ViaCode, out *Token) error
		ViaBindEmailCode(ctx context.Context, in *TokenCode, out *Status) error
		AccLogin(ctx context.Context, in *AccPwd, out *Token) error
		OverridePwd(ctx context.Context, in *TokenPwd, out *Token) error
		GetPhoneEmail(ctx context.Context, in *Token, out *PhoneEmail) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) GetPubKey(ctx context.Context, in *Target, out *PublickKey) error {
	return h.AccountHandler.GetPubKey(ctx, in, out)
}

func (h *accountHandler) GenToken(ctx context.Context, in *UUID, out *Token) error {
	return h.AccountHandler.GenToken(ctx, in, out)
}

func (h *accountHandler) ViaToken(ctx context.Context, in *Token, out *UUID) error {
	return h.AccountHandler.ViaToken(ctx, in, out)
}

func (h *accountHandler) ViaAccPwd(ctx context.Context, in *ViaPwd, out *Status) error {
	return h.AccountHandler.ViaAccPwd(ctx, in, out)
}

func (h *accountHandler) SendSmsRegCode(ctx context.Context, in *Phone, out *UUID) error {
	return h.AccountHandler.SendSmsRegCode(ctx, in, out)
}

func (h *accountHandler) SendSmsRetrieveCode(ctx context.Context, in *Phone, out *UUID) error {
	return h.AccountHandler.SendSmsRetrieveCode(ctx, in, out)
}

func (h *accountHandler) SendSmsLoginCode(ctx context.Context, in *Phone, out *UUID) error {
	return h.AccountHandler.SendSmsLoginCode(ctx, in, out)
}

func (h *accountHandler) SendSmsBindCode(ctx context.Context, in *TokenPhone, out *Status) error {
	return h.AccountHandler.SendSmsBindCode(ctx, in, out)
}

func (h *accountHandler) SendEmailRegCode(ctx context.Context, in *Email, out *UUID) error {
	return h.AccountHandler.SendEmailRegCode(ctx, in, out)
}

func (h *accountHandler) SendEmailRetrieveCode(ctx context.Context, in *Email, out *UUID) error {
	return h.AccountHandler.SendEmailRetrieveCode(ctx, in, out)
}

func (h *accountHandler) SendEmailBindCode(ctx context.Context, in *TokenEmail, out *Status) error {
	return h.AccountHandler.SendEmailBindCode(ctx, in, out)
}

func (h *accountHandler) ActBySmsCode(ctx context.Context, in *ViaReg, out *Token) error {
	return h.AccountHandler.ActBySmsCode(ctx, in, out)
}

func (h *accountHandler) ActBySmsCodeNoPw(ctx context.Context, in *ViaCode, out *Token) error {
	return h.AccountHandler.ActBySmsCodeNoPw(ctx, in, out)
}

func (h *accountHandler) ViaRetrieveSmsCode(ctx context.Context, in *ViaCode, out *Token) error {
	return h.AccountHandler.ViaRetrieveSmsCode(ctx, in, out)
}

func (h *accountHandler) ViaLoginSmsCode(ctx context.Context, in *ViaCode, out *Token) error {
	return h.AccountHandler.ViaLoginSmsCode(ctx, in, out)
}

func (h *accountHandler) ViaBindSmsCode(ctx context.Context, in *TokenCode, out *Status) error {
	return h.AccountHandler.ViaBindSmsCode(ctx, in, out)
}

func (h *accountHandler) ActByEmailCode(ctx context.Context, in *ViaReg, out *Token) error {
	return h.AccountHandler.ActByEmailCode(ctx, in, out)
}

func (h *accountHandler) ViaRetrieveEmailCode(ctx context.Context, in *ViaCode, out *Token) error {
	return h.AccountHandler.ViaRetrieveEmailCode(ctx, in, out)
}

func (h *accountHandler) ViaBindEmailCode(ctx context.Context, in *TokenCode, out *Status) error {
	return h.AccountHandler.ViaBindEmailCode(ctx, in, out)
}

func (h *accountHandler) AccLogin(ctx context.Context, in *AccPwd, out *Token) error {
	return h.AccountHandler.AccLogin(ctx, in, out)
}

func (h *accountHandler) OverridePwd(ctx context.Context, in *TokenPwd, out *Token) error {
	return h.AccountHandler.OverridePwd(ctx, in, out)
}

func (h *accountHandler) GetPhoneEmail(ctx context.Context, in *Token, out *PhoneEmail) error {
	return h.AccountHandler.GetPhoneEmail(ctx, in, out)
}

// Client API for Profile service

type ProfileService interface {
	GetAccProfiles(ctx context.Context, in *Token, opts ...client.CallOption) (*Profiles, error)
	GetProfSumm(ctx context.Context, in *UUID, opts ...client.CallOption) (*ProfSumm, error)
	GetAccRole(ctx context.Context, in *Token, opts ...client.CallOption) (*Role, error)
	GetProfsByRole(ctx context.Context, in *TokePage, opts ...client.CallOption) (*ProfInfos, error)
	UpdateProfiles(ctx context.Context, in *TokeProfile, opts ...client.CallOption) (*Status, error)
	UpdateRole(ctx context.Context, in *TokeRole, opts ...client.CallOption) (*Status, error)
	UpdateStrField(ctx context.Context, in *TokenSigStr, opts ...client.CallOption) (*Status, error)
	UpdateIntField(ctx context.Context, in *TokenSigInt, opts ...client.CallOption) (*Status, error)
	UploadHeader(ctx context.Context, in *TokenUpload, opts ...client.CallOption) (*URLPath, error)
}

type profileService struct {
	c    client.Client
	name string
}

func NewProfileService(name string, c client.Client) ProfileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "accservice"
	}
	return &profileService{
		c:    c,
		name: name,
	}
}

func (c *profileService) GetAccProfiles(ctx context.Context, in *Token, opts ...client.CallOption) (*Profiles, error) {
	req := c.c.NewRequest(c.name, "Profile.GetAccProfiles", in)
	out := new(Profiles)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) GetProfSumm(ctx context.Context, in *UUID, opts ...client.CallOption) (*ProfSumm, error) {
	req := c.c.NewRequest(c.name, "Profile.GetProfSumm", in)
	out := new(ProfSumm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) GetAccRole(ctx context.Context, in *Token, opts ...client.CallOption) (*Role, error) {
	req := c.c.NewRequest(c.name, "Profile.GetAccRole", in)
	out := new(Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) GetProfsByRole(ctx context.Context, in *TokePage, opts ...client.CallOption) (*ProfInfos, error) {
	req := c.c.NewRequest(c.name, "Profile.GetProfsByRole", in)
	out := new(ProfInfos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UpdateProfiles(ctx context.Context, in *TokeProfile, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateProfiles", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UpdateRole(ctx context.Context, in *TokeRole, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateRole", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UpdateStrField(ctx context.Context, in *TokenSigStr, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateStrField", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UpdateIntField(ctx context.Context, in *TokenSigInt, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "Profile.UpdateIntField", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileService) UploadHeader(ctx context.Context, in *TokenUpload, opts ...client.CallOption) (*URLPath, error) {
	req := c.c.NewRequest(c.name, "Profile.UploadHeader", in)
	out := new(URLPath)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profile service

type ProfileHandler interface {
	GetAccProfiles(context.Context, *Token, *Profiles) error
	GetProfSumm(context.Context, *UUID, *ProfSumm) error
	GetAccRole(context.Context, *Token, *Role) error
	GetProfsByRole(context.Context, *TokePage, *ProfInfos) error
	UpdateProfiles(context.Context, *TokeProfile, *Status) error
	UpdateRole(context.Context, *TokeRole, *Status) error
	UpdateStrField(context.Context, *TokenSigStr, *Status) error
	UpdateIntField(context.Context, *TokenSigInt, *Status) error
	UploadHeader(context.Context, *TokenUpload, *URLPath) error
}

func RegisterProfileHandler(s server.Server, hdlr ProfileHandler, opts ...server.HandlerOption) error {
	type profile interface {
		GetAccProfiles(ctx context.Context, in *Token, out *Profiles) error
		GetProfSumm(ctx context.Context, in *UUID, out *ProfSumm) error
		GetAccRole(ctx context.Context, in *Token, out *Role) error
		GetProfsByRole(ctx context.Context, in *TokePage, out *ProfInfos) error
		UpdateProfiles(ctx context.Context, in *TokeProfile, out *Status) error
		UpdateRole(ctx context.Context, in *TokeRole, out *Status) error
		UpdateStrField(ctx context.Context, in *TokenSigStr, out *Status) error
		UpdateIntField(ctx context.Context, in *TokenSigInt, out *Status) error
		UploadHeader(ctx context.Context, in *TokenUpload, out *URLPath) error
	}
	type Profile struct {
		profile
	}
	h := &profileHandler{hdlr}
	return s.Handle(s.NewHandler(&Profile{h}, opts...))
}

type profileHandler struct {
	ProfileHandler
}

func (h *profileHandler) GetAccProfiles(ctx context.Context, in *Token, out *Profiles) error {
	return h.ProfileHandler.GetAccProfiles(ctx, in, out)
}

func (h *profileHandler) GetProfSumm(ctx context.Context, in *UUID, out *ProfSumm) error {
	return h.ProfileHandler.GetProfSumm(ctx, in, out)
}

func (h *profileHandler) GetAccRole(ctx context.Context, in *Token, out *Role) error {
	return h.ProfileHandler.GetAccRole(ctx, in, out)
}

func (h *profileHandler) GetProfsByRole(ctx context.Context, in *TokePage, out *ProfInfos) error {
	return h.ProfileHandler.GetProfsByRole(ctx, in, out)
}

func (h *profileHandler) UpdateProfiles(ctx context.Context, in *TokeProfile, out *Status) error {
	return h.ProfileHandler.UpdateProfiles(ctx, in, out)
}

func (h *profileHandler) UpdateRole(ctx context.Context, in *TokeRole, out *Status) error {
	return h.ProfileHandler.UpdateRole(ctx, in, out)
}

func (h *profileHandler) UpdateStrField(ctx context.Context, in *TokenSigStr, out *Status) error {
	return h.ProfileHandler.UpdateStrField(ctx, in, out)
}

func (h *profileHandler) UpdateIntField(ctx context.Context, in *TokenSigInt, out *Status) error {
	return h.ProfileHandler.UpdateIntField(ctx, in, out)
}

func (h *profileHandler) UploadHeader(ctx context.Context, in *TokenUpload, out *URLPath) error {
	return h.ProfileHandler.UploadHeader(ctx, in, out)
}
