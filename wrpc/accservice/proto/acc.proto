syntax = "proto3";

package proto;
option go_package = "./proto";

service Acc {

  // -----------------------------------
  // For Common & Utils
  // -----------------------------------

  // Request token access permission check
  rpc ViaToken(Token) returns (AccPwd);

  // Account role access permission check
  rpc ViaRole(Role) returns (Result);

  // Account login by uuid/phone/email and encryptd password 
  rpc AccLogin(AccPwd) returns (Token);

  // Return profiles on role, e.g. get all store composers
  rpc RoleProfiles(UserRole) returns (RoleProfs);

  // Return profiles on role, and filter by search conditions
  rpc SearchInRole(Search) returns (RoleProfs);

  // Update account email, it maybe case duplicate entry error when tag email exist in databse
  rpc UpdateEmail(IDEMail) returns (AEmpty);

  // Rest account password and send it to account email
  rpc RestSendPwd(UUID) returns (AEmpty);

  // Return account emails by given uuids
  rpc GetAccEmails(UIDS) returns (IDEMails);

  // Return account contact (contain nickname, phone, email)
  rpc GetContact(UUID) returns (Contact);

  // Delete indicated account by given uuid
  rpc DeleteAcc(UUID) returns (AEmpty);

  // -----------------------------------
  // For Store Module Of IFSCM
  // -----------------------------------

  // Register store machine account
  rpc StoreAddMach(Email) returns (UUID);

  // Register store composer account
  rpc StoreAddComp(Composer) returns (UUID);

  // Update store composer email and nickname
  rpc StoreUpComp(CompSimp) returns (AEmpty);

  // Store machine bind with player wechat unionid
  rpc StoreBindWx(WxBind) returns (AEmpty);

  // Store machine unbind player wechat unionid
  rpc StoreUnbindWx(AccPwd) returns (AEmpty);

  // Rename store machine nickname and addresses
  rpc StoreRename(Addresses) returns (AEmpty);

  // Return account simple profiles and addresses
  rpc StoreProfile(UUID) returns (ProfStore);

  // Return store machine unionid and addresses
  rpc StoreAddresses(UIDS) returns (StoreAddrs);

  rpc AccActivate (UUID) returns (AEmpty);
  rpc GetProfile(UUID) returns (Profile);
  rpc GetProfSumms(UIDS) returns (ProfSumms);
  rpc GetCreatetime(UUID) returns (CreateTime);

  rpc StoreProfiles(UIDS) returns (ProfStores);
  rpc StoreRePwd(RePwd) returns (AEmpty);
  rpc SetContact(Contact) returns (AEmpty);
  rpc BindAccount(Secures) returns (Token);
  rpc UnbindUnionID2(UUID) returns (AEmpty);
}

message AEmpty {}       // diferent other server when using together

message Token {
  string token = 1;     // account request token
}

message UUID {
  string uuid = 1;      // account unique id
}

message UIDS {
  repeated string uids = 1;
}

message Email {
  string email = 1;      // account email
}

message CreateTime {
  int64 createtime = 1; // createtime of account
}

message AccPwd {
  string acc = 1;       // account uuid, email or phone
  string pwd = 2;       // account login password enripted by RSA + Base64
}

message IDEMail {
  string uuid = 1;      // uuid for the profile
  string email = 2;     // store composer email address to update
}

message IDEMails {
  repeated IDEMail items = 1;
}

message Contact {
  string uuid = 1;      // account unique id
  string contact = 2;   // account nickname
  string email = 3;     // account email address
  string phone = 4;     // account email phone
}

message Profile {
  string uuid = 1;      // account unique id
  string nickname = 2;  // account nickname
  string heardurl = 3;  // account heardurl, the value set from wechat avatar or manual update by userself
  int64  sex = 4;       // account sex, 0:none, 1:male, 2:female, 3:neutral
  string birthday = 5;  // account birthday, the value set from real-name authentication
  bool   isverify = 6;  // status to indicate account if pass real-name autnenticated
}

message ProfSumm {
  string uuid = 1;      // account unique id
  int64  sex = 2;       // account sex, 0:none, 1:male, 2:female, 3:neutral
  string nickname = 3;  // account nickname
  string heardurl = 4;  // account heardurl, the value set from wechat avatar
}

message ProfSumms {
  repeated ProfSumm summs = 1;
}

message StoreAddr {
  string uuid = 1;      // uuid for the profile
  string unionid = 2;   // wechat unionid bind with store account
  string nickname = 3;  // store name frist perfix string
  string province = 4;  // store name middle string
  string city = 5;      // store name the last string
  string address = 6;   // store address string
}

message StoreAddrs {
  repeated StoreAddr addrs = 1;
}

message ProfStore {
  string logourl = 1;   // store logo image url from heardurl field value of database
  string unionid = 2;   // wechat unionid bind with store account
  string email = 3;     // store account email address, set when account generate
  string phone = 4;     // store account phone number, set when account generate
  string nickname = 5;  // store name frist perfix string
  string province = 6;  // store name middle string
  string city = 7;      // store name the last string
  string address = 8;   // store address string
  string uuid = 9;      // uuid for the profile
  bool   activate = 10; // is account activate
}

message ProfStores {
  repeated ProfStore profiles = 1;
}

message Addresses {
  string uuid = 1;      // account unique id
  string nickname = 2;  // store name frist perfix string
  string province = 3;  // store name middle string
  string city = 4;      // store name the last string
}

message RePwd {
  string uuid = 1;      // account unique id
  string nickname = 2;  // account nickname, maybe the company name
  string pwd = 3;       // account password
  string role = 4;      // account for role, store-comp or store-machine
}

message WxBind {
  string uuid = 1;      // account unique id
  string unionid = 2;   // wechat unionid bind with store account
  string pwd =3;        // account login password enripted by RSA + Base64
}

message Secures {
  string uuid = 1;      // account unique id
  string unionid = 2;   // wechat unionid bind with account
  string email = 3;     // account email address
  string pwd = 4;       // account login password enripted by RSA + Base64
}

message Role {
  string uuid = 1;      // verification request account id
  string router = 2;    // verification request API router
  string method = 3;    // verification request http method
}

message Result {
  bool pass = 1;        // if account enable access router, ture is allow, false denied
}

message UserRole {
  string role = 1;      // traget role
}

message Machine {
  string email = 1;     // store machine account email address, set when account generate
  string machsn = 2;    // store name frist perfix string
}

message Composer {
  string email = 1;     // store account email address, set when account generate
  string nickname = 2;  // store composer nickname
}

message CompSimp {
  string uuid = 1;      // uuid for the profile
  string email = 2;     // store composer email address to update
  string nickname = 3;  // store composer nickname
}

message RoleProf {
  string uuid = 1;      // uuid for the profile
  string email = 2;     // account email
  string phone = 3;     // account phone
  string nickname = 4;  // account nickname
  string heardurl = 5;  // account heardurl, the value set from wechat avatar  
}

message RoleProfs {
  repeated RoleProf profiles = 1;
}

message Search {
  int64  category = 1;  // category for search
  string keyword = 2;   // search keyword
  string role = 3;      // target role
}
